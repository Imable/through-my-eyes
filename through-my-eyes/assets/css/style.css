
/*
 *  Smarties
 *************
 * RESET-ANIMATION-RETRIGGER
        Remove an animation on state change of checkbox (:checked), such that the animation is reapplied when the state
        changes back (not :checked). This restarts the animation.
 
 * CHECKBOX-COUSIN-SELECTION
        Input and label tag are split in HTML (input in grandparent of label), such that the input:checked selector can
        apply style to cousins of the label. Due to the for attribute the label can still enable the :checked state 
        on the checkbox.
 * CASCADING-TRANSFORM
        By placing blocks next to each other using top/right/bottom/left we can create a cascading transformation by just
        applying one transformation to all elements involved. For example, this can be used for sliders.
 
 * UNHIDE-PSEUDO-CONTENT
        Using visibility to hide the main element and show the pseudo element leaves space allocated to the main element.
        Using a font-size of 0rem removes the main elements allocated space. Using a font-size of 1rem on the pseudo element
        returns the pseudo element the main elements original font-size.
        Warning: a font-size of 0px can result in unexpected behavior in some browsers.

 *  Template
 *************
 * Variables
 * Display
        * Visibility
        * Grid/flex
        * Overflow
        * Pointer-events
 * Positioning/layout
        * Position
        * Top/right/bottom/left
        * Transform
        * Padding/margin
        * Z-index
        * Align
 * Sizing
        * Width/height
        * Font Sizing
        * Box-sizing
 * Coloring
        * Opacity
        * Border
 * Font transformations
 * Animations
        * Transition
 */


/*********************
 *      Generic      *
 *********************/

 :root {
  --unit: calc(0.5vw + 0.5vh);

  --duration-put-on: 2s;
  --duration-put-on-delay: 0.25s;

  --size-font: calc(14px + 1.25 * var(--unit));

  --color-glasses-overlay: #2B3EA5;
  --color-glasses-overlay-opacity: 0.2;
}

* {
  padding: 0px;
  margin: 0px;
}

html {
  overflow-x: hidden;
  
  font-size: var(--size-font);
}

/*********************
*       Layout      *
*********************/

header {
  
}

main {
  width: 100%; height: 300vh;
}

footer {

}

/*********************
*      Content      *
*********************/

/*
*    View selector
* * * * * * * * * * */

/* Split input and label tag to allow cousin selection [CHECKBOX-COUSIN-SELECTION] */
#swap-bar  {
  --size-swap-bar-padding: 0.2em;
  --color-swap-bar-background: rgb(236, 238, 204);

  position: fixed;
  padding: var(--size-swap-bar-padding) 0px;
  z-index: 1;
  text-align: center;

  width: 100%;

  background-color: var(--color-swap-bar-background);
}

/*  
*  Textual swapping
*/

#swap-bar p {
  display: inline;
}

/* Hide textual element without hiding pseudo element [UNHIDE-PSEUDO-CONTENT] */
#swap-bar label {
  visibility: hidden;
  
  font-size: 0px;

  cursor: pointer;
}

#swap-bar label::before {
  visibility: visible;

  content: 'Look at my eyes';

  font-size: 1rem;

  font-style: italic;
}

input#swap-eyes:checked ~ div#swap-bar label::before {
  content: 'Look through my eyes'
}

/*  
*  Functional swapping
*/

input#swap-eyes {
  display: none;
}

input#swap-eyes:checked ~ div.scene {
  transform: translate(100%, 0px);
}

/* Reset the animation when switching views to retrigger it when switching back [RESET-ANIMATION-RETRIGGER] */
input#swap-eyes:checked ~ div#through-my-eyes #glasses, input#swap-eyes:checked ~ div#through-my-eyes #glasses-overlay  {
  animation: none;
}

/*
*  View definition
* * * * * * * * * * */

.scene {
  overflow-x: hidden;

  position: absolute;
  top: 0px; left: 0px;

  width: 100%;

  transition: transform 0.25s cubic-bezier(0.075, 0.82, 0.165, 1);
}

/*  
*  Look at my eyes
*/

/* Position specification to switch views with a single transform application [CASCADING-TRANSFORM] */
#at-my-eyes {
  left: -100%;
}

/*  
*  Look through my eyes
*/

#through-my-eyes {
}

#through-my-eyes .content {
  height: 100vh; width: 100vw;
}

#through-my-eyes .content #mountains {
  position: absolute;
  top: 10%;

  width: 120vw;
}

#through-my-eyes #glasses {
  pointer-events: none;
  
  position: fixed;
  top: 50%;
  z-index: 1;

  animation: var(--duration-put-on) ease var(--duration-put-on-delay) 1 normal both running put-on;
}

#through-my-eyes #glasses-overlay {
  pointer-events: none;

  position: fixed;
  top: 0px; left: 0px;

  width: 100%; height: 100vh;

  background-color: var(--color-glasses-overlay);

  animation: calc(0.4 * var(--duration-put-on)) ease calc(0.25 * var(--duration-put-on) + var(--duration-put-on-delay)) 1 normal both running fade-in;
}

@keyframes fade-in {
  0% {
      opacity: 0;
  }

  100% {
      opacity: var(--color-glasses-overlay-opacity);
  }
}

@keyframes put-on {
  0% {
    transform: translate(0px, -20%) scale(1.5);

    opacity: 0;
  }

  50% {
    opacity: 0.85;
  }

  85% {
    transform: translate(0px, -50%) scale(2.5);   
  }

  100% {
    display: none;

    opacity: 0;
  }
}